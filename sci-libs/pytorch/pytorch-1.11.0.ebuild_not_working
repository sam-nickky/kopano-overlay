# Copyright 1999-2021 Gentoo Authors
# Distributed under the terms of the GNU General Public License v2

EAPI=8

DISTUTILS_USE_SETUPTOOLS=manual
DISTUTILS_SINGLE_IMPL=1
PYTHON_COMPAT=( python3_{8..10} )

inherit cmake cuda distutils-r1 prefix git-r3

DESCRIPTION="Tensors and Dynamic neural networks in Python with strong GPU acceleration"
HOMEPAGE="https://pytorch.org/"

EGIT_REPO_URI="https://github.com/${PN}/${PN}.git"
EGIT_BRANCH="release/1.11"
EGIT_SUBMODULES=( '*' )

# git clone git@github.com:pytorch/pytorch.git && cd pytorch
# git submodules update --init --recursive
# ${FILESDIR}/get_third_paries
# cat SRC_URI src_prepare

LICENSE="BSD"
SLOT="0"
KEYWORDS="~amd64"

IUSE="asan blas cuda +fbgemm ffmpeg gflags glog +gloo leveldb lmdb mkldnn mpi namedtensor +nnpack numa +observers opencl opencv +openmp +python +qnnpack redis rocm static tools zeromq"
REQUIRED_USE="	?? ( cuda rocm )"

#cuda? ( dev-libs/cudnn )
RDEPEND="
	$(python_gen_cond_dep '
	dev-python/pyyaml[${PYTHON_USEDEP}]
	')
	blas? ( virtual/blas )
	rocm? ( >=dev-util/hip-4.3
			>=dev-libs/rccl-4.3
			>=sci-libs/rocThrust-4.3
			>=sci-libs/hipCUB-4.3
			>=sci-libs/rocPRIM-4.3
			>=sci-libs/miopen-4.3
			>=sci-libs/rocBLAS-4.3
			>=sci-libs/rocRAND-4.3
			>=sci-libs/hipSPARSE-4.3
			>=sci-libs/rocFFT-4.3
			>=dev-util/roctracer-4.3 )
	ffmpeg? ( media-video/ffmpeg )
	gflags? ( dev-cpp/gflags )
	glog? ( dev-cpp/glog[gflags] )
	leveldb? ( dev-libs/leveldb )
	lmdb? ( dev-db/lmdb )
	mpi? ( virtual/mpi )
	opencl? ( dev-libs/clhpp )
	opencv? ( media-libs/opencv )
	python? ( ${PYTHON_DEPS}
		$(python_gen_cond_dep '
		dev-python/setuptools[${PYTHON_USEDEP}]
		dev-python/pybind11[${PYTHON_USEDEP}]
		dev-python/numpy[${PYTHON_USEDEP}]
		dev-python/protobuf-python:=[${PYTHON_USEDEP}]
		')
	)
	redis? ( dev-db/redis )
	zeromq? ( net-libs/zeromq )
	dev-cpp/eigen
	dev-libs/protobuf:=
	dev-libs/libuv
"

#ATen code generation
BDEPEND="dev-python/pyyaml"

DEPEND="${RDEPEND}
	dev-cpp/tbb
	app-arch/zstd
	$(python_gen_cond_dep '
	dev-python/pybind11[${PYTHON_USEDEP}]
	dev-python/typing-extensions[${PYTHON_USEDEP}]
	')
	sys-process/numactl
"
#	sys-fabric/libibverbs

#PATCHES=(
#    "${FILESDIR}"/${PN}-9999-Change-library-directory-according-to-CMake-build.patch
#	"${FILESDIR}"/${PN}-9999-global-dlopen.patch
#	"${FILESDIR}"/${PN}-9999-Don-t-build-libtorch-again.patch
#	"${FILESDIR}"/${PN}-1.7.1-no-rpath.patch
#	"${FILESDIR}"/${PN}-9999-torch_shm_manager.patch
#	"${FILESDIR}"/${PN}-9999-clhpp2.patch
#	"${FILESDIR}"/${P}-jit-null-pointer-fix.patch
#)

#S="${WORKDIR}/pytorch-d697bb4220ff5ea8b46591cc082583bbf1a294a4"
#S="${WORKDIR}/pytorch-1.10.2"

distutils_enable_tests --install pytest

src_prepare() {
	cmake_src_prepare
	eprefixify torch/__init__.py

	if use cuda; then
		cd third_party/nccl/nccl || die
#		eapply "${FILESDIR}"/${PN}-1.10.1-nccl-nvccflags.patch
		addpredict /dev/nvidiactl
		cuda_src_prepare
		export CUDAHOSTCXX=$(cuda_gccdir)/g++
		cd "${S}"
	fi

	if use rocm; then
		#Allow escaping sandbox
		addread /dev/kfd
		addread /dev/dri
		addpredict /dev/kfd
		addpredict /dev/dri

		ebegin "HIPifying cuda sources"
		${EPYTHON} tools/amd_build/build_amd.py || die
		eapply "${FILESDIR}"/${PN}-1.9.1-fix-wrong-hipify.patch
		eend $?

		local ROCM_VERSION="$(hipconfig -v)-"
		export PYTORCH_ROCM_ARCH="${AMDGPU_TARGETS}"
		sed -e "/set(roctracer_INCLUDE_DIRS/s,\${ROCTRACER_PATH}/include,${EPREFIX}/usr/include/roctracer," \
			-e "/PYTORCH_HIP_HCC_LIBRARIES/s,\${HIP_PATH}/lib,${EPREFIX}/usr/lib/hip/lib," \
			-e "s,\${ROCTRACER_PATH}/lib,${EPREFIX}/usr/lib64/roctracer," \
			-e "/READ.*\.info\/version-dev/c\  set(ROCM_VERSION_DEV_RAW ${ROCM_VERSION})" \
			-i cmake/public/LoadHIP.cmake || die
		sed -r -e '/^if\(USE_ROCM/{:a;N;/\nendif/!ba; s,\{([^\{]*)_PATH\}(/include)?,\{\L\1_\UINCLUDE_DIRS\},g}' -i cmake/Dependencies.cmake || die
	fi

	# Set build dir for pytorch's setup
	sed -e "/BUILD_DIR/s,build,${BUILD_DIR}," -i tools/setup_helpers/env.py || die
}

src_configure() {
	local mycmakeargs=(
		-DWERROR=OFF
		-DTORCH_CUDA_ARCH_LIST=${TORCH_CUDA_ARCH_LIST}
		-DTORCH_BUILD_VERSION=${PV}
		-DTORCH_INSTALL_LIB_DIR=$(get_libdir)
		-DBUILD_BINARY=$(usex tools ON OFF)
		-DBUILD_CUSTOM_PROTOBUF=OFF
		-DBUILD_PYTHON=$(usex python ON OFF)
		-DBUILD_SHARED_LIBS=$(usex static OFF ON)
		-DBUILD_TEST=$(usex test ON OFF)
		-DUSE_ASAN=$(usex asan ON OFF)
		-DUSE_CUDA=$(usex cuda ON OFF)
		-DUSE_NCCL=$(usex cuda ON OFF)
		-DUSE_SYSTEM_NCCL=OFF
		-DUSE_ROCM=$(usex rocm ON OFF)
		-DUSE_FBGEMM=$(usex fbgemm ON OFF)
		-DUSE_FFMPEG=$(usex ffmpeg ON OFF)
		-DUSE_GFLAGS=$(usex gflags ON OFF)
		-DUSE_GLOG=$(usex glog ON OFF)
		-DUSE_LEVELDB=$(usex leveldb ON OFF)
		-DUSE_LITE_PROTO=OFF
		-DUSE_LMDB=$(usex lmdb ON OFF)
		-DUSE_MKLDNN=$(usex mkldnn ON OFF)
		-DUSE_MKLDNN_CBLAS=OFF
		-DUSE_NNPACK=$(usex nnpack ON OFF)
		-DUSE_NUMPY=$(usex python ON OFF)
		-DUSE_NUMA=$(usex numa ON OFF)
		-DUSE_OBSERVERS=$(usex observers ON OFF)
		-DUSE_OPENCL=$(usex opencl ON OFF)
		-DUSE_OPENCV=$(usex opencv ON OFF)
		-DUSE_OPENMP=$(usex openmp ON OFF)
		-DUSE_TBB=OFF
		-DUSE_PROF=OFF
		-DUSE_QNNPACK=$(usex qnnpack ON OFF)
		-DUSE_REDIS=$(usex redis ON OFF)
		-DUSE_ROCKSDB=OFF
		-DUSE_ZMQ=$(usex zeromq ON OFF)
		-DUSE_MPI=$(usex mpi ON OFF)
		-DUSE_GLOO=$(usex gloo ON OFF)
		-DUSE_SYSTEM_EIGEN_INSTALL=ON
		-DUSE_SYSTEM_PYBIND11=ON
		-DBLAS=$(usex blas Generic Eigen)
		-DTP_BUILD_LIBUV=OFF
		-Wno-dev
	)

	HIP_PATH="${EPREFIX}/usr/lib/hip" cmake_src_configure

	if use python; then
		CMAKE_BUILD_DIR="${BUILD_DIR}" distutils-r1_src_configure
	fi

	# do not rerun cmake and the build process in src_install
	sed '/RERUN/,+1d' -i "${BUILD_DIR}"/build.ninja || die
}

src_compile() {
	cmake_src_compile

	if use python; then
		USE_SYSTEM_LIBS=ON CMAKE_BUILD_DIR=${BUILD_DIR} distutils-r1_src_compile
	fi
}

src_install() {
	cmake_src_install

	local LIB=$(get_libdir)
	if [[ ${LIB} != lib ]]; then
		mv -fv "${ED}"/usr/lib/*.so "${ED}"/usr/${LIB}/ || die
	fi

	rm -r "${ED}/usr/lib" || die

	rm -r "${ED}/usr/include/asmjit" || die
	rm -r "${ED}/usr/include/c10d" || die
	rm -r "${ED}/usr/include/fbgemm" || die
	rm -r "${ED}/usr/include/fp16" || die
	rm -r "${ED}/usr/include/gloo" || die

	if use python; then
		scanelf -r --fix "${BUILD_DIR}/caffe2/python" || die
		USE_SYSTEM_LIBS=ON CMAKE_BUILD_DIR=${BUILD_DIR} distutils-r1_src_install

		python_optimize
	fi

	find "${ED}/usr/${LIB}" -name "*.a" -exec rm -fv {} \; || die

	if use test; then
		rm -r "${ED}/usr/test" "${ED}"/usr/bin/test_{api,jit} || die
	fi

	# Remove the empty directories by CMake Python:
	find "${ED}" -type d -empty -delete || die
}
