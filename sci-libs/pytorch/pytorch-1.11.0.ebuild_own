# Copyright 1999-2021 Gentoo Authors
# Distributed under the terms of the GNU General Public License v2

EAPI="8"

DISTUTILS_USE_SETUPTOOLS=manual
DISTUTILS_SINGLE_IMPL=1
PYTHON_COMPAT=( python3_8 python3_9 python3_10 )

inherit distutils-r1 toolchain-funcs python-single-r1 git-r3 cmake cuda prefix
#git-r3

DESCRIPTION="Tensors and Dynamic neural networks in Python with strong GPU acceleration"
HOMEPAGE="https://github.com/pytorch/pytorch"
#SRC_URI="https://github.com/pytorch/pytorch/archive/refs/tags/v${PV}.tar.gz -> pytorch-${PV}.tar.gz"
EGIT_REPO_URI="https://github.com/${PN}/${PN}.git"
EGIT_BRANCH="release/1.11"
EGIT_SUBMODULES=( '*' )

LICENSE="BSD"
SLOT="0"
KEYWORDS="amd64"
IUSE="blas +cuda +openmp +python +opencv gflags glog static test"

RDEPEND="
	$(python_gen_cond_dep '
	dev-python/pyyaml[${PYTHON_USEDEP}]
	')
	blas? ( virtual/blas )
	gflags? ( dev-cpp/gflags )
	glog? ( dev-cpp/glog[gflags] )
	opencv? ( media-libs/opencv )
	python? ( ${PYTHON_DEPS}
		$(python_gen_cond_dep '
		dev-python/setuptools[${PYTHON_USEDEP}]
		dev-python/pybind11[${PYTHON_USEDEP}]
		dev-python/numpy[${PYTHON_USEDEP}]
		dev-python/protobuf-python:=[${PYTHON_USEDEP}]
		')
	)
	dev-cpp/eigen
	dev-libs/protobuf:=
	dev-libs/libuv
"


#DEPEND="dev-python/future\
#	dev-python/typing-extensions\
#	dev-python/six\
#	dev-python/setuptools\
#	dev-python/pyyaml\
#	dev-python/numpy\
#	dev-python/requests\
#	dev-cpp/gflags
#	dev-cpp/glog
#	dev-cpp/eigen
#	dev-libs/protobuf:=
#	dev-libs/libuv
#"

DEPEND="${RDEPEND}
	dev-cpp/tbb
	app-arch/zstd
	$(python_gen_cond_dep '
	dev-python/pybind11[${PYTHON_USEDEP}]
	dev-python/typing-extensions[${PYTHON_USEDEP}]
	')
	sys-process/numactl
"

PATCHES=(
    "${FILESDIR}"/${PN}-9999-Change-library-directory-according-to-CMake-build.patch
	"${FILESDIR}"/${PN}-9999-global-dlopen.patch
	"${FILESDIR}"/${PN}-9999-Don-t-build-libtorch-again.patch
	"${FILESDIR}"/${PN}-9999-torch_shm_manager.patch
)

src_prepare() {
        cmake_src_prepare
        eprefixify torch/__init__.py

#	NCCL_INCLUDE_DIRS="/usr/include"
#	NCCL_LIBRARIES="/usr/lib64"
#	CUDA_GPU_DETECT_OUTPUT=7.5
#	NCCL_EXTERNAL=TRUE
#	USE_SYSTEM_NCCL=1
#	USE_GFLAGS=ON
#	USE_GLOG=ON
#	eapply "${FILESDIR}/fix_autodetection.patch"
#	eapply "${FILESDIR}/fix_sleef_include_for_aten.patch"

	if use cuda; then
		cd third_party/nccl/nccl || die
		eapply "${FILESDIR}"/${PN}-1.10.1-nccl-nvccflags.patch
		addpredict /dev/nvidiactl
		cuda_src_prepare
		export CUDAHOSTCXX=$(cuda_gccdir)/g++
		cd "${S}"
	fi

	eapply_user
	sed -i 's#^  ${CMAKE_CURRENT_SOURCE_DIR}/tensor_iterator_test.cpp##g' aten/src/ATen/test/CMakeLists.txt
}

src_configure() {
        local mycmakeargs=(
                -DWERROR=OFF
                -DTORCH_BUILD_VERSION=${PV}
                -DTORCH_INSTALL_LIB_DIR=$(get_libdir)
		-DBUILD_CUSTOM_PROTOBUF=OFF
		-DBUILD_PYTHON=$(usex python ON OFF)
		-DBUILD_SHARED_LIBS=$(usex static OFF ON)
		-DBUILD_TEST=$(usex test ON OFF)
                -DUSE_CUDA=$(usex cuda ON OFF)
		-DUSE_CUDA=$(usex cuda ON OFF)
		-DUSE_GFLAGS=$(usex gflags ON OFF)
		-DUSE_GLOG=$(usex glog ON OFF)
		-DUSE_NCCL=$(usex cuda ON OFF)
		-DUSE_SYSTEM_NCCL=OFF
		-DUSE_SYSTEM_EIGEN_INSTALL=ON
		-DUSE_SYSTEM_PYBIND11=ON
		-DBLAS=$(usex blas Generic Eigen)
		-DTP_BUILD_LIBUV=OFF
		-Wno-dev
	)

	HIP_PATH="${EPREFIX}/usr/lib/hip" cmake_src_configure

	if use python; then
		CMAKE_BUILD_DIR="${BUILD_DIR}" distutils-r1_src_configure
	fi

	# do not rerun cmake and the build process in src_install
	sed '/RERUN/,+1d' -i "${BUILD_DIR}"/build.ninja || die
}

src_compile() {
	cmake_src_compile

	if use python; then
		USE_SYSTEM_LIBS=ON CMAKE_BUILD_DIR=${BUILD_DIR} distutils-r1_src_compile
	fi
}

src_install() {
	cmake_src_install

	local LIB=$(get_libdir)
	if [[ ${LIB} != lib ]]; then
		mv -fv "${ED}"/usr/lib/*.so "${ED}"/usr/${LIB}/ || die
	fi

	rm -r "${ED}/usr/lib" || die

	rm -r "${ED}/usr/include/asmjit" || die
	rm -r "${ED}/usr/include/c10d" || die
	rm -r "${ED}/usr/include/fbgemm" || die
	rm -r "${ED}/usr/include/fp16" || die
	rm -r "${ED}/usr/include/gloo" || die

	if use python; then
		scanelf -r --fix "${BUILD_DIR}/caffe2/python" || die
		USE_SYSTEM_LIBS=ON CMAKE_BUILD_DIR=${BUILD_DIR} distutils-r1_src_install

		python_optimize
	fi

	find "${ED}/usr/${LIB}" -name "*.a" -exec rm -fv {} \; || die

	if use test; then
		rm -r "${ED}/usr/test" "${ED}"/usr/bin/test_{api,jit} || die
	fi

	# Remove the empty directories by CMake Python:
	find "${ED}" -type d -empty -delete || die
}
